@attribute [Route($"/{AppRoutes.MyVideo}")]
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using QuickUnity.Common
@using QuickUnity.Data
@using QuickUnity.Components.Components
@using QuickUnity.Components.Modals
@using QuickUnity.Entities
@inject ApplicationDbContext DbContext;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DialogService DialogService

<AuthorizeView>
    <RadzenButton Icon="add_circle"  Size="ButtonSize.Large" Click="@(()=>VideoLoaderModal(context.User.Identity?.Name??""))">Add new video</RadzenButton>
    <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Left">
        @foreach (var path in _models)
        {
            <VideoCard OnDataChange="@FetchData" Model="@path"/>
        }
    </RadzenStack>
</AuthorizeView>

@code {
    List<VideoCardModel> _models = [];
    string _username = "";
    protected override async Task OnInitializedAsync()
    {
        _username = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.Name ?? throw new Exception("smth wrong with user");
        await FetchData();


        base.OnInitializedAsync();
    }

    private async Task FetchData()
    {
        _models = (await DbContext.Set<ApplicationUser>()
                .Include(x => x.Profile)
                .ThenInclude(x => x.Videos)
                .FirstAsync(x => x.UserName == _username)).Profile.Videos
            .Select(x => new VideoCardModel(x)).ToList();
        StateHasChanged();
    }

    private async Task VideoLoaderModal(string username)
    {
        await DialogService.OpenAsync<VideoLoaderModal>("Add new video", 
            new Dictionary<string, object> { { "Username", username }, { "OnDataChange", FetchData } },
            new DialogOptions { Resizable = true, Draggable = true });
    }

}