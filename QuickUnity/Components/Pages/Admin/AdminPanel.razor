@attribute [Route($"/{AppRoutes.Admin}")]
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using QuickUnity.Common
@using QuickUnity.Components.Modals
@using QuickUnity.Data
@using QuickUnity.Services
@inject ApplicationDbContext Context;
@inject IServiceScopeFactory ScopeFactory;
@inject MediaStorageService MediaService
@inject DialogService DialogService

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@_users" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" >
    <Columns>
        <RadzenDataGridColumn Property="@nameof(UserDto.Id)" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center" >
            <Template Context="data">
                <RadzenButton Variant="Variant.Text" Click="@(()=>ShowAvatarModal(data.Username))">
                    <RadzenImage Visible="MediaService.AvatarAvailable(data.Username)" Style="width: 40px; height: 40px; border-radius: 50%;" Path="@MediaService.GetAvatarRelativePatch(data.Username)"></RadzenImage>
                    <RadzenGravatar Visible="@(!MediaService.AvatarAvailable(data.Username))" Email=@(data.Username)/>
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(UserDto.Name)" Title="First Name" Frozen="true" Width="160px" />
        <RadzenDataGridColumn Property="@nameof(UserDto.LastName)" Title="Last Name" Width="160px"/>
        <RadzenDataGridColumn Property="@nameof(UserDto.Username)" Title="Username" Width="200px" />
        <RadzenDataGridColumn Property="@nameof(UserDto.City)" Title="City" Width="200px" />
        <RadzenDataGridColumn Property="@nameof(UserDto.Club)" Title="Club" Width="200px" />
        <RadzenDataGridColumn Property="@nameof(UserDto.EmailConfirmed)" Title="Email confirmed" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(UserDto.JoinDate)" Title="User since" Width="100px" />
        <RadzenDataGridColumn Title="Role" Width="100px" Sortable="true" Filterable="false">
            <Template Context="data">
                <RadzenSplitButton Click="@(args => AssignRole(data.Id, args.Value))" Text="@data.Role">
                    <ChildContent>
                        <RadzenSplitButtonItem Text="User" Value="@PredefinedRoles.User.ToString()" />
                        <RadzenSplitButtonItem Text="Trainer" Value="@PredefinedRoles.Trainer.ToString()" />
                        <RadzenSplitButtonItem Text="Admin" Value="@PredefinedRoles.Admin.ToString()" />
                    </ChildContent>
                </RadzenSplitButton>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Actions" Width="100px" Sortable="false" Filterable="false">
            <Template Context="data">
                <RadzenButton Text="Delete user" Click="@(() => DeleteUser(data.Id))" ButtonStyle="ButtonStyle.Danger"/>
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    private List<UserDto> _users = new();

    protected override Task OnInitializedAsync()
    {
        FetchData();
        return base.OnInitializedAsync();
    }
    
    public async Task ShowAvatarModal(string userId)
    {
        await DialogService.OpenAsync<AvatarLoaderModal>($"Avatar choose",
            new Dictionary<string, object>() { { "UserId", userId } },
            new DialogOptions() 
            {
                Resizable = true, 
                Draggable = true,
            });
    }

    private void FetchData()
    {
        
            var identityUsers = Context.Set<ApplicationUser>().Include(x=>x.Profile).ToList();
            var roles = Context.Set<IdentityRole>().ToList();
            var userRoles = Context.UserRoles.ToList(); // Assuming you have UserRoles set up

            _users = identityUsers.Select(user =>
            {
                var userRole = userRoles.FirstOrDefault(ur => ur.UserId == user.Id);
                var roleName = userRole != null ? roles.FirstOrDefault(r => r.Id == userRole.RoleId)?.Name : "No Role";

                return new UserDto(user, roleName);
            }).ToList();
        
    }
    
    private async Task DeleteUser(string userId)
    {
        var user = await Context.Set<ApplicationUser>().FirstAsync(x => x.Id == userId);
        Context.Set<ApplicationUser>().Remove(user);
        await Context.SaveChangesAsync();
        FetchData();
    }
    
    private async Task AssignRole(string userId, string role)
    {
        await using var scope = ScopeFactory.CreateAsyncScope();
        var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
        
        var user = await userManager.FindByIdAsync(userId); 
        if (user != null)
        {
            foreach (var userRole in await userManager.GetRolesAsync(user))
            {
                if (userRole != role)
                {
                    await userManager.RemoveFromRoleAsync(user, userRole);
                }
            }
            if (!await userManager.IsInRoleAsync(user, role))
            {
                await userManager.AddToRoleAsync(user, role);
            }
            FetchData();
        }
    }
    private class UserDto
    {
        public UserDto(ApplicationUser user, string role)
        {
            Id = user.Id;
            Email = user.Email ?? "";
            Username = user.UserName ?? "";
            Role = role;
            Name = user.Profile?.Name??"";
            LastName = user.Profile?.LastName??"";
            JoinDate = user.Profile?.JoinDate??new DateOnly();
            EmailConfirmed = user.EmailConfirmed;
            City = user.Profile?.City ?? "";
            Club = user.Profile?.Club ?? "";
        }

        public string City { get; set; }
        public string Club { get; set; }
        public string Id { get; set; }
        public string Name { get; set; }
        public string LastName { get; set; }
        public string Username { get; set; }
        public DateOnly JoinDate { get; set; }
        public string Email { get; set; }
        public bool EmailConfirmed { get; set; }
        public string Role { get; set; }
    }

    private enum PredefinedRoles
    {
        User,
        Trainer,
        Admin,
    }

}