@page "/vid"
@using System.Linq.Dynamic.Core
@using Microsoft.EntityFrameworkCore
@using QuickUnity.Data
@using QuickUnity.Data.Tables
@using QuickUnity.Entities
@using QuickUnity.Entities.Enums
@using QuickUnity.Services
@inject MediaStorageService MediaService
@inject DialogService DialogService
@inject ApplicationDbContext Context;

<RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width: 500px">
    <RadzenStack Gap="1rem">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
            <RadzenStack Visible="@(_tempPatch is not null)" JustifyContent="JustifyContent.Center" Gap="1rem">
                <video controls width="480" style="border-radius: 30px;">
                    <source src="@_tempPatch" type="video/mp4" />
                </video>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceEvenly">
                    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Success" Click="@OnAccept">Accept</RadzenButton>
                    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Danger" Click="@OnReject">Reject</RadzenButton>
                </RadzenStack>
                <RadzenFormField Text="Title" Variant="Variant.Filled" Style="width: 100%;">
                    <RadzenTextBox Name="UserName" @bind-Value="@_video.Name" Style="width: 100%"/>
                </RadzenFormField>
                <RadzenFormField Text="Description" Variant="Variant.Filled" Style="width: 100%;">
                    <RadzenTextArea Name="Description" Rows="6" @bind-Value="@_video.Description" Style="width: 100%"/>
                </RadzenFormField>

            </RadzenStack>
        </RadzenStack>
        <RadzenCard Variant="Variant.Outlined">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Upload your picture</RadzenText>
            <RadzenUpload Multiple="true" Change="@OnClientChange" Style="width: 100%"
                          InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"/>
        </RadzenCard>
    </RadzenStack>
</RadzenCard>

@code {
    
    [Parameter,EditorRequired] 
    public required string Username { get; set; }
    
    [Parameter, EditorRequired]
    public required Func<Task>  OnDataChange { get; set; }
    

    private readonly VideoDto _video = new();
    private readonly string _videoId = Guid.NewGuid().ToString();
    
    private string? _tempPatch;
    private Action<bool> _confirmAction;

    private async Task OnAccept()
    {
        _confirmAction.Invoke(true);
        DialogService.Close(true);
        var profile = await Context.Set<ProfileRow>()
            .Include(x => x.ApplicationUser)
            .FirstAsync(x => x.ApplicationUser.UserName == Username);
        var video = new VideoRow
        {
            Name = _video.Name,
            Description = _video.Description,
            Id = _videoId,
            Path = MediaService.GetVideoRelativePatch(Username, _videoId),
            ProfileRow = profile
        };
        await Context.AddAsync(video);
        await Context.SaveChangesAsync();
        await OnDataChange.Invoke();
    }
    private void OnReject()
    {
        _confirmAction.Invoke(false);
        DialogService.Close(true);
    }

    async Task OnClientChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            try
            {
                var request = new MediaSaveRequest
                {
                    MediaId = _videoId ,
                    MediaType = MultimediaType.Video,
                    OwnerId = Username,
                    FileContent = file
                };
                var tmp =await MediaService.SaveFileAsync(request);
                _tempPatch = tmp.Key;
                Console.WriteLine(_tempPatch);
                _confirmAction = tmp.Value;
                StateHasChanged();
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading file {file.Name}: {ex.Message}");
            }
        }
    }

    private class VideoDto
    {
        public string Description { get; set; } = "";
        public string Name { get; set; } = "";
    }
}