@page "/vid"
@using QuickUnity.Entities
@using QuickUnity.Entities.Enums
@using QuickUnity.Services
@inject MediaStorageService MediaService
@inject DialogService DialogService

<RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width: 500px">
    <RadzenStack Gap="1rem">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
            <RadzenStack Visible="@(tempPatch is not null)" JustifyContent="JustifyContent.Center" Gap="1rem">
                <video controls width="480" style="border-radius: 30px;">
                    <source src="@tempPatch" type="video/mp4" />
                </video>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceEvenly">
                    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Success" Click="@OnAccept">Accept</RadzenButton>
                    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Danger" Click="@OnReject">Reject</RadzenButton>
                </RadzenStack>
                <RadzenFormField Text="Title" Variant="Variant.Filled" Style="width: 100%;">
                    <RadzenTextBox Name="UserName" @bind-Value="@_video.Name" Style="width: 100%"/>
                </RadzenFormField>
                <RadzenFormField Text="Description" Variant="Variant.Filled" Style="width: 100%;">
                    <RadzenTextArea Name="Description" Rows="6" @bind-Value="@_video.Description" Style="width: 100%"/>
                </RadzenFormField>

            </RadzenStack>
        </RadzenStack>
        <RadzenCard Variant="Variant.Outlined">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Upload your picture</RadzenText>
            <RadzenUpload Multiple="true" Change="@OnClientChange" Style="width: 100%"
                          InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"/>
        </RadzenCard>
    </RadzenStack>
</RadzenCard>

@code {
    
    [Parameter,EditorRequired] 
    public required string UserId { get; set; }

    private VideoDto _video = new();
    
    private string? tempPatch;
    private Action<bool> confirmAction;

    private void OnAccept()
    {
        confirmAction.Invoke(true);
        DialogService.Close(true);
        StateHasChanged();
    }
    private void OnReject()
    {
        confirmAction.Invoke(false);
        DialogService.Close(true);
    }

    async Task OnClientChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            try
            {
                var request = new MediaSaveRequest
                {
                    MediaId = Guid.NewGuid().ToString(),
                    mediaType = MultimediaType.Video,
                    OwnerId = "dummy",
                    // OwnerId = UserId,
                    fileContent = file
                };
                var tmp =await MediaService.SaveFileAsync(request);
                tempPatch = tmp.Key;
                Console.WriteLine(tempPatch);
                confirmAction = tmp.Value;
                StateHasChanged();
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading file {file.Name}: {ex.Message}");
            }
        }
    }

    private class VideoDto
    {
        public string Description { get; set; } = "";
        public string Name { get; set; } = "";
    }
}