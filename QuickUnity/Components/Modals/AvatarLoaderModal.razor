@using QuickUnity.Entities
@using QuickUnity.Entities.Enums
@using QuickUnity.Services
@inject MediaStorageService MediaService
@inject DialogService DialogService

<RadzenCard class="rz-my-12 rz-mx-auto" Style="max-width: 420px">
    <RadzenStack Gap="1rem">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
            <RadzenStack Visible="@(MediaService.AvatarAvailable(UserId) && _tempPatch is null)">
                <RadzenImage Path="@MediaService.GetAvatarRelativePatch(UserId)" Style="width: 400px; height: 400px; border-radius: 10%;"/>
            </RadzenStack>
            <RadzenStack Visible="@(_tempPatch is not null)" JustifyContent="JustifyContent.Center" Gap="1rem">
                <RadzenImage Path="@_tempPatch" Style="width: 400px; height: 400px; border-radius: 10%;"/>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceEvenly">
                    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Success" Click="@OnAccept">Accept</RadzenButton>
                    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Danger" Click="@OnReject">Reject</RadzenButton>
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
        <RadzenCard Variant="Variant.Outlined">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Upload your picture</RadzenText>
            <RadzenUpload Multiple="true" Change="@OnClientChange" Style="width: 100%"
                          InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"/>
        </RadzenCard>
    </RadzenStack>
</RadzenCard>

@code {
    
    [Parameter,EditorRequired] 
    public required string UserId { get; set; }
    
    private const long MaxFileSize = 10 * 1024 * 1024;
    private string? _tempPatch;
    private Action<bool> _confirmAction;

    private void OnAccept()
    {
        _confirmAction.Invoke(true);
        DialogService.Close(true);
        StateHasChanged();
    }
    private void OnReject()
    {
        _confirmAction.Invoke(false);
        DialogService.Close(true);
    }

    async Task OnClientChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            try
            {
                if (file.Size > MaxFileSize)
                    throw new FileLoadException($"File {file.Name} is too large.");
                    
                var request = new MediaSaveRequest
                {
                    MediaId = "avatar",
                    MediaType = MultimediaType.Image,
                    OwnerId = UserId,
                    FileContent = file
                };
                var tmp =await MediaService.SaveFileAsync(request);
                _tempPatch = tmp.Key;
                Console.WriteLine(_tempPatch);
                _confirmAction = tmp.Value;
                StateHasChanged();
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading file {file.Name}: {ex.Message}");
            }
        }
    }
}