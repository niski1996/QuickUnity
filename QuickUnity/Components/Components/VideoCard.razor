@using Microsoft.EntityFrameworkCore
@using QuickUnity.Components.Modals
@using QuickUnity.Data
@using QuickUnity.Data.Tables
@using QuickUnity.Entities
@using QuickUnity.Services
@inject MediaStorageService MediaService
@inject DialogService DialogService
@inject ApplicationDbContext Context;
@inject IWebHostEnvironment Environment;

<RadzenCard class="rz-my-12 rz-mx-auto" Style="width: 300px;">
    <RadzenStack JustifyContent="JustifyContent.Center" Gap="1rem" onclick="@OpenPlayer">
        <SlidesCarousel SlidesPath="_paths" IntervalInSeconds="1"/>
        <RadzenFormField ReadOnly="@(!_editMode)" Text="Title" Variant="Variant.Filled" Style="width: 100%;">
            <RadzenTextBox ReadOnly="@(!_editMode)"  Name="UserName" @bind-Value="@Model.Name" Style="width: 100%"/>
        </RadzenFormField>
        <RadzenFormField Text="Description" Variant="Variant.Filled" Style="width: 100%;">
            <RadzenTextArea ReadOnly="@(!_editMode)" Name="Description" Rows="3" @bind-Value="@Model.Description" Style="width: 100%"/>
        </RadzenFormField>
        <RadzenStack Visible="@(!_editMode)" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceEvenly">
            <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Success" Click="@OnEditEnabled">Edit</RadzenButton>
            <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Danger" Click="@OnDelete">Delete</RadzenButton>
        </RadzenStack>
        <RadzenStack Visible="@(_editMode)" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceEvenly">
            <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Success" Click="@OnSave">Save</RadzenButton>
            <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Danger" Click="@OnCancel">Cancel</RadzenButton>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {

    [Parameter, EditorRequired] public required VideoCardModel Model { get; set; }
    
    [Parameter, EditorRequired]
    public required Func<Task>  OnDataChange { get; set; }

    private bool _editMode = false;


    protected override Task OnInitializedAsync()
    {
        var slidePath = Path.Combine(Path.GetDirectoryName(Model.Path)??"", "slides");
        _paths = Enumerable.Range(0, MediaStorageService.SlidesAmount).Select(x => Path.Combine(slidePath, $"{x}.png")).ToList();
        return base.OnInitializedAsync();
    }
    
    private List<string>? _paths;
    
    private void OnEditEnabled()
    {
        _editMode = true;
        StateHasChanged();
    }

    private async Task OnDelete()
    {
        var video = await Context.Set<VideoRow>().FirstAsync(x => x.Id == Model.Id);
        Context.Set<VideoRow>().Remove(video);
        await Context.SaveChangesAsync();
        var basePath = Environment.WebRootPath;
        var fullPath = Path.Combine(basePath, Path.GetDirectoryName(Model.Path) ?? "");
        Directory.Delete(fullPath, true);
        await OnDataChange.Invoke();
    }
    
    private async Task OpenPlayer()
    {
        await DialogService.OpenAsync<Player>(Model.Name, 
            new Dictionary<string, object> { { "VideoPath", Model.Path}},
            new DialogOptions { Resizable = true, Draggable = true });
    }

    private async Task OnSave()
    {
        if (Model.StateHasChanged())
        {
            var video = await Context.Set<VideoRow>().FirstAsync(x => x.Id == Model.Id);
            video.Description = Model.Description;
            video.Name = Model.Name;
            await Context.SaveChangesAsync();
            Model.SetOriginalState();
        }
        _editMode = false;
        StateHasChanged();
    }

    private void OnCancel()
    {
        Model.RestoreOriginalState();
        _editMode = false;
        StateHasChanged();
    }

}

